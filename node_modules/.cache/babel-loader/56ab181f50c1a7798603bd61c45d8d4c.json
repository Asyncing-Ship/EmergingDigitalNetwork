{"ast":null,"code":"import _regeneratorRuntime from \"/home/scoundrel/Desktop/eda-solo-spike/edn-spike/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchUser),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchAllUsers),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from \"axios\";\nimport { put, takeLatest } from \"redux-saga/effects\"; // worker Saga: will be fired on \"FETCH_USER\" actions\n\nfunction fetchUser() {\n  var config, response;\n  return _regeneratorRuntime.wrap(function fetchUser$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        config = {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          withCredentials: true\n        }; // the config includes credentials which\n        // allow the server session to recognize the user\n        // If a user is logged in, this will return their information\n        // from the server session (req.user)\n\n        _context.next = 4;\n        return axios.get(\"/api/user\", config);\n\n      case 4:\n        response = _context.sent;\n        _context.next = 7;\n        return put({\n          type: \"SET_USER\",\n          payload: response.data\n        });\n\n      case 7:\n        _context.next = 12;\n        break;\n\n      case 9:\n        _context.prev = 9;\n        _context.t0 = _context[\"catch\"](0);\n        console.log(\"User get request failed\", _context.t0);\n\n      case 12:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction fetchAllUsers() {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchAllUsers$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        _context2.next = 3;\n        return axios.get(\"/api/user/all\");\n\n      case 3:\n        response = _context2.sent;\n        _context2.next = 6;\n        return put({\n          type: \"SET_ALL_USERS\",\n          payload: response.data\n        });\n\n      case 6:\n        _context2.next = 11;\n        break;\n\n      case 8:\n        _context2.prev = 8;\n        _context2.t0 = _context2[\"catch\"](0);\n        console.log(\"get all users request failed\", _context2.t0);\n\n      case 11:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeLatest(\"FETCH_USER\", fetchUser);\n\n      case 2:\n        _context3.next = 4;\n        return takeLatest(\"FETCH_ALL_USERS\", fetchAllUsers);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default userSaga;","map":{"version":3,"sources":["/home/scoundrel/Desktop/eda-solo-spike/edn-spike/src/redux/sagas/userSaga.js"],"names":["fetchUser","fetchAllUsers","userSaga","axios","put","takeLatest","config","headers","withCredentials","get","response","type","payload","data","console","log"],"mappings":";;oDAIUA,S;qDAsBAC,a;qDAUAC,Q;;AApCV,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC,C,CAEA;;AACA,SAAUL,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUM,QAAAA,MAFV,GAEmB;AACbC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WADI;AAEbC,UAAAA,eAAe,EAAE;AAFJ,SAFnB,EAOI;AACA;AACA;AACA;;AAVJ;AAWqB,eAAML,KAAK,CAACM,GAAN,CAAU,WAAV,EAAuBH,MAAvB,CAAN;;AAXrB;AAWUI,QAAAA,QAXV;AAAA;AAgBI,eAAMN,GAAG,CAAC;AAAEO,UAAAA,IAAI,EAAE,UAAR;AAAoBC,UAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAtC,SAAD,CAAT;;AAhBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBIC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAUd,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqB,eAAME,KAAK,CAACM,GAAN,CAAU,eAAV,CAAN;;AAFrB;AAEUC,QAAAA,QAFV;AAAA;AAII,eAAMN,GAAG,CAAC;AAAEO,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,OAAO,EAAEF,QAAQ,CAACG;AAA3C,SAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMIC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMG,UAAU,CAAC,YAAD,EAAeL,SAAf,CAAhB;;AADF;AAAA;AAEE,eAAMK,UAAU,CAAC,iBAAD,EAAoBJ,aAApB,CAAhB;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeC,QAAf","sourcesContent":["import axios from \"axios\";\nimport { put, takeLatest } from \"redux-saga/effects\";\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get(\"/api/user\", config);\n\n    // now that the session has given us a user object\n    // with an id and email set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: \"SET_USER\", payload: response.data });\n  } catch (error) {\n    console.log(\"User get request failed\", error);\n  }\n}\n\nfunction* fetchAllUsers() {\n  try {\n    const response = yield axios.get(\"/api/user/all\");\n\n    yield put({ type: \"SET_ALL_USERS\", payload: response.data });\n  } catch (error) {\n    console.log(\"get all users request failed\", error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(\"FETCH_USER\", fetchUser);\n  yield takeLatest(\"FETCH_ALL_USERS\", fetchAllUsers);\n}\n\nexport default userSaga;\n"]},"metadata":{},"sourceType":"module"}