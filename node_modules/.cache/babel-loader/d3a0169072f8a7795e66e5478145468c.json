{"ast":null,"code":"var _jsxFileName = \"/home/scoundrel/Desktop/eda-solo/edn-solo-project/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./redux/reducers\"; // imports ./redux/reducers/index.js\n\nimport rootSaga from \"./redux/sagas\"; // imports ./redux/sagas/index.js\n\nimport App from \"./Components/App/App\";\nconst sagaMiddleware = createSagaMiddleware(); // this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\n\nconst middlewareList = process.env.NODE_ENV === \"development\" ? [sagaMiddleware, logger] : [sagaMiddleware];\nconst store = createStore( // tells the saga middleware to use the rootReducer\n// rootSaga contains all of our other reducers\nrootReducer, // adds all middleware to our project including saga and logger\ncomposeWithDevTools(applyMiddleware(...middlewareList))); // tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\n\nsagaMiddleware.run(rootSaga);\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\")); // const store = createStore(reducer, composeWithDevTools(\n//   applyMiddleware(...middleware),\n//   // other store enhancers if any\n// ));","map":{"version":3,"sources":["/home/scoundrel/Desktop/eda-solo/edn-solo-project/src/index.js"],"names":["React","ReactDOM","createStore","applyMiddleware","Provider","createSagaMiddleware","composeWithDevTools","logger","rootReducer","rootSaga","App","sagaMiddleware","middlewareList","process","env","NODE_ENV","store","run","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,kBAAxB,C,CAA4C;;AAC5C,OAAOC,QAAP,MAAqB,eAArB,C,CAAsC;;AAEtC,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C,C,CAEA;AACA;AACA;;AACA,MAAMO,cAAc,GAClBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACI,CAACJ,cAAD,EAAiBJ,MAAjB,CADJ,GAEI,CAACI,cAAD,CAHN;AAKA,MAAMK,KAAK,GAAGd,WAAW,EACvB;AACA;AACAM,WAHuB,EAIvB;AACAF,mBAAmB,CAACH,eAAe,CAAC,GAAGS,cAAJ,CAAhB,CALI,CAAzB,C,CAQA;AACA;;AACAD,cAAc,CAACM,GAAf,CAAmBR,QAAnB;AAEAR,QAAQ,CAACiB,MAAT,eACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./redux/reducers\"; // imports ./redux/reducers/index.js\nimport rootSaga from \"./redux/sagas\"; // imports ./redux/sagas/index.js\n\nimport App from \"./Components/App/App\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList =\n  process.env.NODE_ENV === \"development\"\n    ? [sagaMiddleware, logger]\n    : [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  composeWithDevTools(applyMiddleware(...middlewareList))\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// const store = createStore(reducer, composeWithDevTools(\n//   applyMiddleware(...middleware),\n//   // other store enhancers if any\n// ));\n"]},"metadata":{},"sourceType":"module"}